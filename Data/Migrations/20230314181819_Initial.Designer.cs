// <auto-generated />
using System;
using API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230314181819_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("API.Entities.AccountType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("AccountTypes");
                });

            modelBuilder.Entity("API.Entities.Diet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("DietRequirementsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Diets");
                });

            modelBuilder.Entity("API.Entities.DietDish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DietDayId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DishTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Quantity")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DietDishes");
                });

            modelBuilder.Entity("API.Entities.DietRequirements", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Calcium")
                        .HasColumnType("TEXT");

                    b.Property<string>("Carbohydrates")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cholesterol")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fibers")
                        .HasColumnType("TEXT");

                    b.Property<string>("Iron")
                        .HasColumnType("TEXT");

                    b.Property<string>("Kcal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Magnesium")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Potassium")
                        .HasColumnType("TEXT");

                    b.Property<string>("Proteins")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sodium")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("VitaminA")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminB12")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminB6")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminC")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminD")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("DietRequirements");
                });

            modelBuilder.Entity("API.Entities.Dish", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Calcium")
                        .HasColumnType("TEXT");

                    b.Property<string>("Carbohydrates")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cholesterol")
                        .HasColumnType("TEXT");

                    b.Property<string>("CookingTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fibers")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("Iron")
                        .HasColumnType("TEXT");

                    b.Property<string>("Kcal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Magnesium")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Portions")
                        .HasColumnType("TEXT");

                    b.Property<string>("Potassium")
                        .HasColumnType("TEXT");

                    b.Property<string>("Proteins")
                        .HasColumnType("TEXT");

                    b.Property<string>("Recipe")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sodium")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminA")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminB12")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminB6")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminC")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminD")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Dishes");
                });

            modelBuilder.Entity("API.Entities.DishIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DishId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PortionQuantity")
                        .HasColumnType("TEXT");

                    b.Property<int>("PortionTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("DishIngredients");
                });

            modelBuilder.Entity("API.Entities.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Brand")
                        .HasColumnType("TEXT");

                    b.Property<string>("Calcium")
                        .HasColumnType("TEXT");

                    b.Property<string>("Carbohydrates")
                        .HasColumnType("TEXT");

                    b.Property<string>("Cholesterol")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("EAN")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fat")
                        .HasColumnType("TEXT");

                    b.Property<string>("Fibers")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Image")
                        .HasColumnType("BLOB");

                    b.Property<string>("Iron")
                        .HasColumnType("TEXT");

                    b.Property<string>("Kcal")
                        .HasColumnType("TEXT");

                    b.Property<string>("Magnesium")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("PortionQuantity")
                        .HasColumnType("TEXT");

                    b.Property<int>("PortionTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Potassium")
                        .HasColumnType("TEXT");

                    b.Property<string>("Proteins")
                        .HasColumnType("TEXT");

                    b.Property<string>("Sodium")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminA")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminB12")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminB6")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminC")
                        .HasColumnType("TEXT");

                    b.Property<string>("VitaminD")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("API.Entities.PortionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("PortionTypes");
                });

            modelBuilder.Entity("API.Entities.ProhibitedIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DietRequirementsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("ProhibitedIngredients");
                });

            modelBuilder.Entity("API.Entities.RequiredIngredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DietRequirementsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("IngredientId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("RequiredIngredients");
                });

            modelBuilder.Entity("API.Entities.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ItemId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NameId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TableId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("NameId");

                    b.HasIndex("TableId");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("API.Entities.TagName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TagNames");
                });

            modelBuilder.Entity("API.Entities.TagTable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TagTables");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AccountTypeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Surname")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.Tag", b =>
                {
                    b.HasOne("API.Entities.Diet", "Diet")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.DietRequirements", "DietRequirements")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Dish", "Dish")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.Ingredient", "Ingredient")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.TagName", "TagName")
                        .WithMany()
                        .HasForeignKey("NameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("API.Entities.TagTable", "TagTable")
                        .WithMany()
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diet");

                    b.Navigation("DietRequirements");

                    b.Navigation("Dish");

                    b.Navigation("Ingredient");

                    b.Navigation("TagName");

                    b.Navigation("TagTable");
                });
#pragma warning restore 612, 618
        }
    }
}
